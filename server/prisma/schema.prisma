generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "darwin-arm64"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Student {
  id                     String            @id @unique @default(uuid())
  email                  String            @unique @db.VarChar(100)
  password               String            @db.VarChar(100)
  isVerified             Boolean           @default(false)
  emailVerificationToken String            @db.Text
  registrationDate       DateTime          @default(now())
  studentProfile         StudentProfile?
  quizFeedbacks          QuizFeedback[]
  quizzes                Quiz[]
  followedQuizzes        FollowedQuizzes[]
  quizQuestion           QuizQuestion[]
  scores                 QuizScore[]
}

model StudentProfile {
  id            Int           @id @unique @default(autoincrement())
  name          String        @db.VarChar(20)
  location      String?       @db.VarChar(20)
  courseOfStudy String?       @db.VarChar(255)
  xingUrl       String?       @db.VarChar(255)
  linkedinUrl   String?       @db.VarChar(255)
  student       Student       @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  studentId     String        @unique
  profileImage  ProfileImage?
}

model ProfileImage {
  id             Int            @id @unique @default(autoincrement())
  publicId       String         @db.Text
  url            String         @db.Text
  studentProfile StudentProfile @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  profileId      Int            @unique
}

model Quiz {
  id            Int               @id @unique @default(autoincrement())
  student       Student           @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId      String
  title         String            @db.Text
  updatedAt     DateTime          @updatedAt
  size          Int               @default(0)
  popularity    Int               @default(0)
  courseOfStudy String
  course        String
  quizQuestions QuizQuestion[]
  followedBy    FollowedQuizzes[]
  feedbacks     QuizFeedback[]
  scors         QuizScore[]
}

model FollowedQuizzes {
  student    Student @relation(fields: [followerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  followerId String
  quiz       Quiz    @relation(fields: [quizId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quizId     Int

  @@unique([followerId, quizId])
}

model QuizQuestion {
  id          Int          @id @unique @default(autoincrement())
  quizId      Int
  quiz        Quiz         @relation(fields: [quizId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  question    String       @db.Text
  quizAnswers QuizAnswer[]
  student     Student      @relation(fields: [authorId], references: [id])
  authorId    String
}

model QuizAnswer {
  id                Int          @id @unique @default(autoincrement())
  answer            String       @db.Text
  answerDescription String?      @db.Text
  isRightAnswer     Boolean
  quizQuestion      QuizQuestion @relation(fields: [quizQuestionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quizQuestionId    Int
}

model QuizFeedback {
  id        Int      @id @unique @default(autoincrement())
  feedback  String   @db.Text
  createdAt DateTime @default(now())
  author    Student  @relation(fields: [authorId], references: [id])
  authorId  String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quizId    Int
}

model QuizScore {
  id               Int      @id @unique @default(autoincrement())
  answeredQuestion Int
  timeTaken        Int
  quiz             Quiz     @relation(fields: [quizId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  quizId           Int
  Student          Student? @relation(fields: [playerId], references: [id])
  playerId         String?
}
